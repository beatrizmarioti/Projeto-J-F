//package com.bea.projetojef.ui;
//
//import android.os.Bundle;
//import android.view.LayoutInflater;
//import android.view.View;
//import android.view.ViewGroup;
//import android.widget.Toast;
//
//import androidx.annotation.NonNull;
//import androidx.fragment.app.Fragment;
//import androidx.recyclerview.widget.LinearLayoutManager;
//
//import com.bea.projetojef.Administrador;
//import com.bea.projetojef.databinding.RemoverRegistroBinding;
//import com.google.firebase.firestore.FirebaseFirestore;
//import com.google.firebase.firestore.QueryDocumentSnapshot;
//
//import java.util.ArrayList;
//import java.util.Calendar;
//import java.util.Date;
//import java.util.List;
//
//public class RemoverRegistro extends Fragment {
//    private RemoverRegistroBinding binding;
//    private FirebaseFirestore db;
//    private final List<Administrador> lista = new ArrayList<>();
//    private AdminAdapter adapter;
//
//    @Override
//    public View onCreateView(@NonNull LayoutInflater inflater,
//                             ViewGroup container, Bundle savedInstanceState) {
//        binding = RemoverRegistroBinding.inflate(inflater, container, false);
//        return binding.getRoot();
//    }
//
//    @Override
//    public void onViewCreated(@NonNull View view, Bundle savedInstanceState) {
//        super.onViewCreated(view, savedInstanceState);
//
//        db = FirebaseFirestore.getInstance();
//        adapter = new AdminAdapter(lista);
//        binding.recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
//        binding.recyclerView.setAdapter(adapter);
//
//        carregarTudo();
//
//        binding.buscar.setOnClickListener(v -> {
//            if (binding.textInputLayout.getEditText() == null) {
//                Toast.makeText(getContext(), "Crachá inválido", Toast.LENGTH_SHORT).show();
//                return;
//            }
//
//            String cracha = binding.textInputLayout.getEditText().getText().toString().trim();
//            if (cracha.isEmpty()) {
//                Toast.makeText(getContext(), "Digite o crachá", Toast.LENGTH_SHORT).show();
//                return;
//            }
//
//            db.collection("colaborador")
//                    .whereEqualTo("cracha", cracha)
//                    .get()
//                    .addOnSuccessListener(snapshots -> {
//                        lista.clear();
//
//                        for (QueryDocumentSnapshot doc : snapshots) {
//                            Administrador a = doc.toObject(Administrador.class);
//                            Long id = doc.getLong("id");
//                            if (id != null) {
//                                a.setId(id);
//                            }
//                            lista.add(a);
//                        }
//
//                        if (lista.isEmpty()) {
//                            Toast.makeText(getContext(), "Colaborador não encontrado", Toast.LENGTH_SHORT).show();
//                        }
//
//                        adapter.notifyDataSetChanged();
//                    })
//                    .addOnFailureListener(e ->
//                            Toast.makeText(getContext(), "Erro ao buscar: " + e.getMessage(), Toast.LENGTH_SHORT).show()
//                    );
//        });
//    }
//
//    private void carregarTudo() {
//        Calendar calInicio = Calendar.getInstance();
//        calInicio.add(Calendar.MONTH, -1);
//        calInicio.set(Calendar.DAY_OF_MONTH, 1);
//        calInicio.set(Calendar.HOUR_OF_DAY, 0);
//        calInicio.set(Calendar.MINUTE, 0);
//        calInicio.set(Calendar.SECOND, 0);
//        calInicio.set(Calendar.MILLISECOND, 0);
//        Date inicioMesPassado = calInicio.getTime();
//
//        Calendar calFim = Calendar.getInstance();
//        calFim.add(Calendar.MONTH, -1);
//        calFim.set(Calendar.DAY_OF_MONTH, calFim.getActualMaximum(Calendar.DAY_OF_MONTH));
//        calFim.set(Calendar.HOUR_OF_DAY, 23);
//        calFim.set(Calendar.MINUTE, 59);
//        calFim.set(Calendar.SECOND, 59);
//        calFim.set(Calendar.MILLISECOND, 999);
//        Date fimMesPassado = calFim.getTime();
//
//        db.collection("colaborador")
//                .whereGreaterThanOrEqualTo("dataRegistro", inicioMesPassado)
//                .whereLessThan("dataRegistro", fimMesPassado)
//                .get()
//                .addOnSuccessListener(snapshots -> {
//                    lista.clear();
//                    for (QueryDocumentSnapshot doc : snapshots) {
//                        Administrador a = doc.toObject(Administrador.class);
//                        Long id = doc.getLong("id");
//                        if (id != null) {
//                            a.setId(id);
//                        }
//                        lista.add(a);
//                    }
//                    adapter.notifyDataSetChanged();
//                })
//                .addOnFailureListener(e ->
//                        Toast.makeText(getContext(), "Erro ao carregar", Toast.LENGTH_SHORT).show()
//                );
//    }
//
//
//    @Override
//    public void onDestroyView() {
//        super.onDestroyView();
//        binding = null;
//    }
//}

package com.bea.projetojef.ui;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;

import com.bea.projetojef.Administrador;
import com.bea.projetojef.databinding.RemoverRegistroBinding;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

public class RemoverRegistro extends Fragment {
    private RemoverRegistroBinding binding;
    private FirebaseFirestore db;
    private final List<Administrador> lista = new ArrayList<>();
    private AdminAdapter adapter;

    // Variáveis para armazenar o intervalo do mês passado
    private Date inicioMesPassado;
    private Date fimMesPassado;

    @Override
    public View onCreateView(@NonNull LayoutInflater inflater,
                             ViewGroup container, Bundle savedInstanceState) {
        binding = RemoverRegistroBinding.inflate(inflater, container, false);
        return binding.getRoot();
    }

    @Override
    public void onViewCreated(@NonNull View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        db = FirebaseFirestore.getInstance();
        adapter = new AdminAdapter(lista);
        binding.recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
        binding.recyclerView.setAdapter(adapter);

        // Calcula o intervalo do mês passado e armazena nas variáveis
        calcularIntervaloMesPassado();

        carregarTudo();

        binding.buscar.setOnClickListener(v -> {
            if (binding.textInputLayout.getEditText() == null) {
                Toast.makeText(getContext(), "Crachá inválido", Toast.LENGTH_SHORT).show();
                return;
            }

            String cracha = binding.textInputLayout.getEditText().getText().toString().trim();
            if (cracha.isEmpty()) {
                Toast.makeText(getContext(), "Digite o crachá", Toast.LENGTH_SHORT).show();
                return;
            }

            db.collection("colaborador")
                    .whereEqualTo("cracha", cracha)
                    .whereGreaterThanOrEqualTo("dataRegistro", inicioMesPassado)
                    .whereLessThan("dataRegistro", fimMesPassado)
                    .get()
                    .addOnSuccessListener(snapshots -> {
                        lista.clear();

                        for (QueryDocumentSnapshot doc : snapshots) {
                            Administrador a = doc.toObject(Administrador.class);
                            Long id = doc.getLong("id");
                            if (id != null) {
                                a.setId(id);
                            }
                            lista.add(a);
                        }

                        if (lista.isEmpty()) {
                            Toast.makeText(getContext(), "Colaborador não encontrado no mês passado", Toast.LENGTH_SHORT).show();
                        }

                        adapter.notifyDataSetChanged();
                    })
                    .addOnFailureListener(e ->
                            Toast.makeText(getContext(), "Erro ao buscar: " + e.getMessage(), Toast.LENGTH_SHORT).show()
                    );
        });
    }

    private void calcularIntervaloMesPassado() {
        Calendar calInicio = Calendar.getInstance();
        calInicio.add(Calendar.MONTH, -1);
        calInicio.set(Calendar.DAY_OF_MONTH, 1);
        calInicio.set(Calendar.HOUR_OF_DAY, 0);
        calInicio.set(Calendar.MINUTE, 0);
        calInicio.set(Calendar.SECOND, 0);
        calInicio.set(Calendar.MILLISECOND, 0);
        inicioMesPassado = calInicio.getTime();

        Calendar calFim = Calendar.getInstance();
        calFim.add(Calendar.MONTH, -1);
        calFim.set(Calendar.DAY_OF_MONTH, calFim.getActualMaximum(Calendar.DAY_OF_MONTH));
        calFim.set(Calendar.HOUR_OF_DAY, 23);
        calFim.set(Calendar.MINUTE, 59);
        calFim.set(Calendar.SECOND, 59);
        calFim.set(Calendar.MILLISECOND, 999);
        fimMesPassado = calFim.getTime();
    }

    private void carregarTudo() {
        db.collection("colaborador")
                .whereGreaterThanOrEqualTo("dataRegistro", inicioMesPassado)
                .whereLessThan("dataRegistro", fimMesPassado)
                .get()
                .addOnSuccessListener(snapshots -> {
                    lista.clear();
                    for (QueryDocumentSnapshot doc : snapshots) {
                        Administrador a = doc.toObject(Administrador.class);
                        Long id = doc.getLong("id");
                        if (id != null) {
                            a.setId(id);
                        }
                        lista.add(a);
                    }
                    adapter.notifyDataSetChanged();
                })
                .addOnFailureListener(e ->
                        Toast.makeText(getContext(), "Erro ao carregar", Toast.LENGTH_SHORT).show()
                );
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        binding = null;
    }
}
